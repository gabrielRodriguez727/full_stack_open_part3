{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","type","notificationStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","PersonForm","handleOnSubmitPersonForm","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","name","number","value","onChange","target","Persons","personsToShow","handleDeletePerson","map","e","onClick","window","confirm","Filter","handleOnChangeFilter","filterName","trim","App","setFilterName","persons","setPersons","notification","setNotification","useEffect","personsService","filterValueTrimed","filter","toLowerCase","includes","filterValue","newPerson","personToUpdate","find","person","setTimeout","concat","personToRemove","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c0741d4.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => true)\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  remove\r\n}","import React, { useState, useEffect } from 'react'\r\nimport personsService from './services/persons'\r\n\r\nconst Notification = ({ message, type }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  let notificationStyle = {\r\n    color: (type === 'error') ? 'red' : 'green',\r\n    background: 'lightgrey',\r\n    fontSize: '20px',\r\n    borderStyle: 'solid',\r\n    borderRadius: '5px',\r\n    padding: '10px',\r\n    marginBottom: '10px',\r\n  }\r\n\r\n  return (\r\n    <div style={notificationStyle}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst PersonForm = ({ handleOnSubmitPersonForm }) => {\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n\r\n\r\n  const handleOnSubmit = function (event) {\r\n    event.preventDefault()\r\n    const newPerson = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n    handleOnSubmitPersonForm(newPerson)\r\n    setNewName('')\r\n    setNewNumber('')\r\n  }\r\n  return (<form onSubmit={handleOnSubmit} >\r\n    <div>\r\n      name: <input value={newName} onChange={(event) => { setNewName(event.target.value) }} />\r\n    </div>\r\n    <div>\r\n      number: <input value={newNumber} onChange={(event) => { setNewNumber(event.target.value) }} />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>)\r\n}\r\n\r\nconst Persons = ({ personsToShow, handleDeletePerson }) => {\r\n\r\n  return (personsToShow.map(e => <div key={e.id}>{e.name} {e.number} <button type='button' onClick={(event) => {\r\n    event.preventDefault();\r\n    let confirmRemove = window.confirm(`Delete ${e.name}?`)\r\n    if (confirmRemove)\r\n      handleDeletePerson(e.id)\r\n  }}>remove</button></div>))\r\n}\r\n\r\nconst Filter = ({ handleOnChangeFilter, filterName }) => {\r\n  return (\r\n    <div>\r\n      filter by: <input value={filterName} onChange={(event) => {\r\n        handleOnChangeFilter(event.target.value.trim())\r\n      }} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [filterName, setFilterName] = useState('')\r\n  const [persons, setPersons] = useState([])\r\n  const [notification, setNotification] = useState({ message: null })\r\n\r\n  useEffect(() => {\r\n    personsService\r\n      .getAll()\r\n      .then(data => {\r\n        setPersons(data)\r\n      })\r\n  }, [])\r\n\r\n  const handleOnChangeFilter = function (filterValue) {\r\n    setFilterName(filterValue)\r\n  }\r\n\r\n  const handleDeletePerson = function (id) {\r\n    let personToRemove = persons.find(e => e.id === id)\r\n    personsService\r\n      .remove(id)\r\n      .then(() => {\r\n        setPersons(persons.filter(e => e.id !== id))\r\n\r\n      }).catch(() => {\r\n        setNotification({\r\n          message: `${personToRemove.name} Was deleted on the server`,\r\n          type: 'error'\r\n        })\r\n        setPersons(persons.filter(e => e.id !== id))\r\n        setTimeout(() => {\r\n          setNotification({\r\n            message: null,\r\n          })\r\n        }, 2000)\r\n      })\r\n  }\r\n\r\n  const handleOnSubmitPersonForm = (newPerson) => {\r\n    let personToUpdate = persons.find(e => e.name === newPerson.name)\r\n    if (personToUpdate) {\r\n      personToUpdate.number = newPerson.number\r\n      let confirmUpdate = window.confirm(`El ${newPerson.name} ya se encuentra en la agenda, actualizar?`)\r\n      if (confirmUpdate) {\r\n        personsService\r\n          .update(personToUpdate.id, personToUpdate)\r\n          .then(person => {\r\n            setPersons(persons.map(e => (e.id == personToUpdate.id) ? personToUpdate : e))\r\n            setNotification({\r\n              message: `${personToUpdate.name} Update correctly`,\r\n              type: 'succes'\r\n            })\r\n            setTimeout(() => {\r\n              setNotification({\r\n                message: null,\r\n              })\r\n            }, 2000)\r\n          })\r\n      }\r\n    } else {\r\n      personsService\r\n        .create(newPerson)\r\n        .then(person => {\r\n          setPersons(persons.concat(person))\r\n          setNotification({\r\n            message: `${newPerson.name} Added correctly`,\r\n            type: 'succes'\r\n          })\r\n          setTimeout(() => {\r\n            setNotification({\r\n              message: null,\r\n            })\r\n          }, 2000)\r\n        })\r\n    }\r\n  }\r\n\r\n  const filterValueTrimed = filterName.trim()\r\n  const personsToShow = (filterValueTrimed) ? persons.filter(e => e.name.toLowerCase().includes(filterValueTrimed)) : persons\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Filter filterName={filterName} handleOnChangeFilter={handleOnChangeFilter} />\r\n      <h3>Add a new</h3>\r\n      <PersonForm handleOnSubmitPersonForm={handleOnSubmitPersonForm} />\r\n      <Notification {...notification} />\r\n      <h2>Numbers</h2>\r\n      <Persons personsToShow={personsToShow} handleDeletePerson={handleDeletePerson} />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}